#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

use std::sync::Mutex;
use tauri::{State, Manager};
use validblock::anchor_service_client::AnchorServiceClient;
use validblock::verify_service_client::VerifyServiceClient;
use validblock::{AnchorRequest, VerifyRequest, Policy};

mod settings;
mod validblock;

use settings::SettingsStore;

use hyper::client::HttpConnector;
use hyper::Client;
use tonic::transport::{Channel, Endpoint};
use tower::ServiceBuilder;
use tonic_web::GrpcWebLayer;

#[derive(Default)]
struct AppState {
    bearer_token: String,
    trinity_mode: Mutex<bool>,
    settings: Mutex<SettingsStore>,
}

// This helper builds a gRPC-Web-compatible channel
async fn grpc_web_channel() -> Result<Channel, tonic::transport::Error> {
    let endpoint = Endpoint::from_static("http://127.0.0.1:8080")
        .connect_timeout(std::time::Duration::from_secs(5))
        .timeout(std::time::Duration::from_secs(10))
        .concurrency_limit(256)
        .tcp_nodelay(true)
        .http1_only(true) // required for grpc-web
        .connect()
        .await;

    endpoint
}

#[tauri::command]
async fn anchor_file(
    file_content: Vec<u8>,
    memo: String,
    use_on_chain: bool,
    state: State<'_, AppState>,
) -> Result<String, String> {
    if use_on_chain && *state.trinity_mode.lock().unwrap() {
        return Err("Trinity mode is enabled. Cannot perform on-chain operations.".into());
    }

    if use_on_chain && memo.len() > 47 {
        return Err("Memo too long for on-chain anchor (max 47 bytes).".into());
    }

    let channel = grpc_web_channel()
        .await
        .map_err(|e| format!("gRPC-Web channel failed: {}", e))?;

    let mut client = AnchorServiceClient::new(channel);

    let req = AnchorRequest {
        file_content,
        memo,
        policy: if use_on_chain {
            Policy::OnChain as i32
        } else {
            Policy::LocalOnly as i32
        },
    };

    let res = client
        .anchor(req)
        .await
        .map_err(|e| map_grpc_error(e.to_string()))?
        .into_inner();

    Ok(res.digest)
}

#[tauri::command]
async fn verify_file(
    file_content: Vec<u8>,
    state: State<'_, AppState>,
) -> Result<bool, String> {
    let channel = grpc_web_channel()
        .await
        .map_err(|e| format!("gRPC-Web channel failed: {}", e))?;

    let mut client = VerifyServiceClient::new(channel);

    let req = VerifyRequest { file_content };

    let res = client
        .verify(req)
        .await
        .map_err(|e| e.to_string())?
        .into_inner();

    Ok(res.verified)
}

#[tauri::command]
fn toggle_trinity_mode(enable: bool, state: State<'_, AppState>) {
    *state.trinity_mode.lock().unwrap() = enable;
}

#[tauri::command]
fn get_trinity_mode(state: State<'_, AppState>) -> bool {
    *state.trinity_mode.lock().unwrap()
}

#[tauri::command]
fn get_settings(state: State<'_, AppState>) -> Result<SettingsStore, String> {
    Ok(state.settings.lock().unwrap().clone())
}

#[tauri::command]
fn put_settings(new_settings: SettingsStore, state: State<'_, AppState>) -> Result<(), String> {
    *state.settings.lock().unwrap() = new_settings;
    Ok(())
}

fn map_grpc_error(msg: String) -> String {
    if msg.contains("DuplicateDigest") {
        "Already anchored. Try again with a different file.".into()
    } else if msg.contains("InvalidMemo") {
        "Memo too long for on-chain anchor (max 47 bytes).".into()
    } else {
        msg
    }
}

#[cfg_attr(mobile, tauri::mobile_entry_point)]
pub fn run() {
    let bearer_token = uuid::Uuid::new_v4().to_string();

    tauri::Builder::default()
        .plugin(tauri_plugin_opener::init())
        .manage(AppState {
            bearer_token,
            ..Default::default()
        })
        .invoke_handler(tauri::generate_handler![
            anchor_file,
            verify_file,
            toggle_trinity_mode,
            get_trinity_mode,
            get_settings,
            put_settings,
        ])
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}
