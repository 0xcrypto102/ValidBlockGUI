// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file proto/validblock.proto (package validblock, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum validblock.Policy
 */
export enum Policy {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: LOCAL_ONLY = 1;
   */
  LOCAL_ONLY = 1,

  /**
   * @generated from enum value: ON_CHAIN = 2;
   */
  ON_CHAIN = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Policy)
proto3.util.setEnumType(Policy, "validblock.Policy", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "LOCAL_ONLY" },
  { no: 2, name: "ON_CHAIN" },
]);

/**
 * @generated from message validblock.AnchorRequest
 */
export class AnchorRequest extends Message<AnchorRequest> {
  /**
   * @generated from field: bytes file_content = 1;
   */
  fileContent = new Uint8Array(0);

  /**
   * @generated from field: string memo = 2;
   */
  memo = "";

  /**
   * @generated from field: validblock.Policy policy = 3;
   */
  policy = Policy.UNKNOWN;

  constructor(data?: PartialMessage<AnchorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "validblock.AnchorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "policy", kind: "enum", T: proto3.getEnumType(Policy) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnchorRequest {
    return new AnchorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnchorRequest {
    return new AnchorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnchorRequest {
    return new AnchorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AnchorRequest | PlainMessage<AnchorRequest> | undefined, b: AnchorRequest | PlainMessage<AnchorRequest> | undefined): boolean {
    return proto3.util.equals(AnchorRequest, a, b);
  }
}

/**
 * @generated from message validblock.AnchorResponse
 */
export class AnchorResponse extends Message<AnchorResponse> {
  /**
   * @generated from field: string digest = 1;
   */
  digest = "";

  /**
   * @generated from field: int64 timestamp = 2;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: string txid = 3;
   */
  txid = "";

  constructor(data?: PartialMessage<AnchorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "validblock.AnchorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "txid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnchorResponse {
    return new AnchorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnchorResponse {
    return new AnchorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnchorResponse {
    return new AnchorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AnchorResponse | PlainMessage<AnchorResponse> | undefined, b: AnchorResponse | PlainMessage<AnchorResponse> | undefined): boolean {
    return proto3.util.equals(AnchorResponse, a, b);
  }
}

/**
 * @generated from message validblock.VerifyRequest
 */
export class VerifyRequest extends Message<VerifyRequest> {
  /**
   * @generated from field: bytes file_content = 1;
   */
  fileContent = new Uint8Array(0);

  constructor(data?: PartialMessage<VerifyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "validblock.VerifyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyRequest {
    return new VerifyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyRequest {
    return new VerifyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyRequest {
    return new VerifyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyRequest | PlainMessage<VerifyRequest> | undefined, b: VerifyRequest | PlainMessage<VerifyRequest> | undefined): boolean {
    return proto3.util.equals(VerifyRequest, a, b);
  }
}

/**
 * @generated from message validblock.VerifyResponse
 */
export class VerifyResponse extends Message<VerifyResponse> {
  /**
   * @generated from field: bool verified = 1;
   */
  verified = false;

  /**
   * @generated from field: string digest = 2;
   */
  digest = "";

  /**
   * @generated from field: int64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: string txid = 4;
   */
  txid = "";

  constructor(data?: PartialMessage<VerifyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "validblock.VerifyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "txid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyResponse {
    return new VerifyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyResponse {
    return new VerifyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyResponse {
    return new VerifyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyResponse | PlainMessage<VerifyResponse> | undefined, b: VerifyResponse | PlainMessage<VerifyResponse> | undefined): boolean {
    return proto3.util.equals(VerifyResponse, a, b);
  }
}

/**
 * @generated from message validblock.ExistDigestRequest
 */
export class ExistDigestRequest extends Message<ExistDigestRequest> {
  /**
   * hex or base64 encoded Digest256
   *
   * @generated from field: string digest = 1;
   */
  digest = "";

  constructor(data?: PartialMessage<ExistDigestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "validblock.ExistDigestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExistDigestRequest {
    return new ExistDigestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExistDigestRequest {
    return new ExistDigestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExistDigestRequest {
    return new ExistDigestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExistDigestRequest | PlainMessage<ExistDigestRequest> | undefined, b: ExistDigestRequest | PlainMessage<ExistDigestRequest> | undefined): boolean {
    return proto3.util.equals(ExistDigestRequest, a, b);
  }
}

/**
 * @generated from message validblock.ExistDigestResponse
 */
export class ExistDigestResponse extends Message<ExistDigestResponse> {
  /**
   * @generated from field: bool exists = 1;
   */
  exists = false;

  constructor(data?: PartialMessage<ExistDigestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "validblock.ExistDigestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExistDigestResponse {
    return new ExistDigestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExistDigestResponse {
    return new ExistDigestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExistDigestResponse {
    return new ExistDigestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExistDigestResponse | PlainMessage<ExistDigestResponse> | undefined, b: ExistDigestResponse | PlainMessage<ExistDigestResponse> | undefined): boolean {
    return proto3.util.equals(ExistDigestResponse, a, b);
  }
}

